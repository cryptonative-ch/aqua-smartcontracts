{
  "address": "0xE554897039fC755b46c0cb084aE16079e645Ed50",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "soldTokenOuts",
          "type": "uint96"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "soldTokenIns",
          "type": "uint96"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "clearingPriceOrder",
          "type": "bytes32"
        }
      ],
      "name": "AuctionCleared",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderCancellationEndDate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "auctionEndDate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "userId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "auctionedSellAmount",
          "type": "uint96"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "minBuyAmount",
          "type": "uint96"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minimumBiddingAmountPerOrder",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minFundingThreshold",
          "type": "uint256"
        }
      ],
      "name": "AuctionInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "userId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "buyAmount",
          "type": "uint96"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "sellAmount",
          "type": "uint96"
        }
      ],
      "name": "CancellationSellOrder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "userId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "buyAmount",
          "type": "uint96"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "sellAmount",
          "type": "uint96"
        }
      ],
      "name": "ClaimedFromOrder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "userId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "buyAmount",
          "type": "uint96"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "sellAmount",
          "type": "uint96"
        }
      ],
      "name": "NewSellOrder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "userId",
          "type": "uint64"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "NewUser",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "userId",
          "type": "uint64"
        }
      ],
      "name": "UserRegistration",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "TEMPLATE_NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionEndDate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_sellOrders",
          "type": "bytes32[]"
        }
      ],
      "name": "cancelSellOrders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "orders",
          "type": "bytes32[]"
        }
      ],
      "name": "claimFromParticipantOrder",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "sumTokenOutAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sumTokenInAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "clearingPriceOrder",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "order",
          "type": "bytes32"
        }
      ],
      "name": "containsOrder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSecondsRemainingInBatch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserId",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "userId",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialAuctionOrder",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interimOrder",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interimSumBidAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isAtomicClosureAllowed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minFundingThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minFundingThresholdNotReached",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumBiddingAmountPerOrder",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numUsers",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "orderCancellationEndDate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint96[]",
          "name": "_minBuyAmounts",
          "type": "uint96[]"
        },
        {
          "internalType": "uint96[]",
          "name": "_sellAmounts",
          "type": "uint96[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "_prevSellOrders",
          "type": "bytes32[]"
        }
      ],
      "name": "placeSellOrders",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "userId",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint96[]",
          "name": "_minBuyAmounts",
          "type": "uint96[]"
        },
        {
          "internalType": "uint96[]",
          "name": "_sellAmounts",
          "type": "uint96[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "_prevSellOrders",
          "type": "bytes32[]"
        },
        {
          "internalType": "address",
          "name": "orderSubmitter",
          "type": "address"
        }
      ],
      "name": "placeSellOrdersOnBehalf",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "userId",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "iterationSteps",
          "type": "uint256"
        }
      ],
      "name": "precalculateSellAmountSum",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "registerUser",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "userId",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "settleAuction",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "clearingOrder",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint96[]",
          "name": "_minBuyAmount",
          "type": "uint96[]"
        },
        {
          "internalType": "uint96[]",
          "name": "_sellAmount",
          "type": "uint96[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "_prevSellOrder",
          "type": "bytes32[]"
        }
      ],
      "name": "settleAuctionAtomically",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenIn",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenOut",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "volumeClearingPriceOrder",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0516f742bdbb4cbfbf712de64fca656a734bf269321847f395ad73414dbad3d2",
  "receipt": {
    "to": null,
    "from": "0xA601aeD34dda12fF760d8ABb64Fd4Eb3664E35Af",
    "contractAddress": "0xE554897039fC755b46c0cb084aE16079e645Ed50",
    "transactionIndex": 16,
    "gasUsed": "2699807",
    "logsBloom": "0x
    "blockHash": "0xc5eae0183d2c434ec8d996af5a3abb8dc0528c6334be1979ffc34152d1cab8e3",
    "transactionHash": "0x0516f742bdbb4cbfbf712de64fca656a734bf269321847f395ad73414dbad3d2",
    "logs": [],
    "blockNumber": 9177475,
    "cumulativeGasUsed": "29835481",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "caea4eca9fddf66e8a5b4ed801cc528f",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"soldTokenOuts\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"soldTokenIns\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"clearingPriceOrder\",\"type\":\"bytes32\"}],\"name\":\"AuctionCleared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderCancellationEndDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionEndDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"userId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"auctionedSellAmount\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"minBuyAmount\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimumBiddingAmountPerOrder\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minFundingThreshold\",\"type\":\"uint256\"}],\"name\":\"AuctionInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"userId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"buyAmount\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"sellAmount\",\"type\":\"uint96\"}],\"name\":\"CancellationSellOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"userId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"buyAmount\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"sellAmount\",\"type\":\"uint96\"}],\"name\":\"ClaimedFromOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"userId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"buyAmount\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"sellAmount\",\"type\":\"uint96\"}],\"name\":\"NewSellOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"userId\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"NewUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"userId\",\"type\":\"uint64\"}],\"name\":\"UserRegistration\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TEMPLATE_NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionEndDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_sellOrders\",\"type\":\"bytes32[]\"}],\"name\":\"cancelSellOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"orders\",\"type\":\"bytes32[]\"}],\"name\":\"claimFromParticipantOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sumTokenOutAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sumTokenInAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearingPriceOrder\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"order\",\"type\":\"bytes32\"}],\"name\":\"containsOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSecondsRemainingInBatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"userId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialAuctionOrder\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interimOrder\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interimSumBidAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAtomicClosureAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minFundingThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minFundingThresholdNotReached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumBiddingAmountPerOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numUsers\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"orderCancellationEndDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96[]\",\"name\":\"_minBuyAmounts\",\"type\":\"uint96[]\"},{\"internalType\":\"uint96[]\",\"name\":\"_sellAmounts\",\"type\":\"uint96[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_prevSellOrders\",\"type\":\"bytes32[]\"}],\"name\":\"placeSellOrders\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"userId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96[]\",\"name\":\"_minBuyAmounts\",\"type\":\"uint96[]\"},{\"internalType\":\"uint96[]\",\"name\":\"_sellAmounts\",\"type\":\"uint96[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_prevSellOrders\",\"type\":\"bytes32[]\"},{\"internalType\":\"address\",\"name\":\"orderSubmitter\",\"type\":\"address\"}],\"name\":\"placeSellOrdersOnBehalf\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"userId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"iterationSteps\",\"type\":\"uint256\"}],\"name\":\"precalculateSellAmountSum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"registerUser\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"userId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settleAuction\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"clearingOrder\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96[]\",\"name\":\"_minBuyAmount\",\"type\":\"uint96[]\"},{\"internalType\":\"uint96[]\",\"name\":\"_sellAmount\",\"type\":\"uint96[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_prevSellOrder\",\"type\":\"bytes32[]\"}],\"name\":\"settleAuctionAtomically\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenIn\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenOut\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"volumeClearingPriceOrder\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/sales/FairSale.sol\":\"FairSale\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0x363bd3b45201f07c9b71c2edc96533468cf14a3d029fabd82fddceb1eb3ebd9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"contracts/sales/FairSale.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\n\\npragma solidity >=0.6.8;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"../shared/libraries/IterableOrderedOrderSet.sol\\\";\\nimport \\\"../shared/libraries/IdToAddressBiMap.sol\\\";\\nimport \\\"../shared/libraries/SafeCast.sol\\\";\\n\\ncontract FairSale {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint64;\\n    using SafeMath for uint96;\\n    using SafeMath for uint256;\\n    using SafeCast for uint256;\\n    using IterableOrderedOrderSet for IterableOrderedOrderSet.Data;\\n    using IterableOrderedOrderSet for bytes32;\\n    using IdToAddressBiMap for IdToAddressBiMap.Data;\\n\\n    modifier notInitialized() {\\n        require(!initialized, \\\"already initialized\\\");\\n        _;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"FairSale: FORBIDDEN\\\");\\n        _;\\n    }\\n\\n    modifier atStageOrderPlacement() {\\n        require(\\n            block.timestamp < auctionEndDate,\\n            \\\"no longer in order placement phase\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier atStageOrderPlacementAndCancelation() {\\n        require(\\n            block.timestamp < orderCancellationEndDate,\\n            \\\"no longer in order placement and cancelation phase\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier atStageSolutionSubmission() {\\n        {\\n            uint256 auctionEndDate = auctionEndDate;\\n            require(\\n                auctionEndDate != 0 &&\\n                    block.timestamp >= auctionEndDate &&\\n                    clearingPriceOrder == bytes32(0),\\n                \\\"Auction not in solution submission phase\\\"\\n            );\\n        }\\n        _;\\n    }\\n\\n    modifier atStageFinished() {\\n        require(clearingPriceOrder != bytes32(0), \\\"Auction not yet finished\\\");\\n        _;\\n    }\\n\\n    event NewSellOrder(\\n        uint64 indexed userId,\\n        uint96 buyAmount,\\n        uint96 sellAmount\\n    );\\n    event CancellationSellOrder(\\n        uint64 indexed userId,\\n        uint96 buyAmount,\\n        uint96 sellAmount\\n    );\\n    event ClaimedFromOrder(\\n        uint64 indexed userId,\\n        uint96 buyAmount,\\n        uint96 sellAmount\\n    );\\n    event NewUser(uint64 indexed userId, address indexed userAddress);\\n    event AuctionInitialized(\\n        IERC20 indexed tokenOut,\\n        IERC20 indexed tokenIn,\\n        uint256 orderCancellationEndDate,\\n        uint256 auctionEndDate,\\n        uint64 userId,\\n        uint96 auctionedSellAmount,\\n        uint96 minBuyAmount,\\n        uint256 minimumBiddingAmountPerOrder,\\n        uint256 minFundingThreshold\\n    );\\n    event AuctionCleared(\\n        uint96 soldTokenOuts,\\n        uint96 soldTokenIns,\\n        bytes32 clearingPriceOrder\\n    );\\n    event UserRegistration(address indexed user, uint64 userId);\\n\\n    string public constant TEMPLATE_NAME = \\\"FairSale\\\";\\n    address public owner;\\n    IERC20 public tokenOut;\\n    IERC20 public tokenIn;\\n    uint256 public orderCancellationEndDate;\\n    uint256 public auctionEndDate;\\n    bytes32 public initialAuctionOrder;\\n    uint256 public minimumBiddingAmountPerOrder;\\n    uint256 public interimSumBidAmount;\\n    bytes32 public interimOrder;\\n    bytes32 public clearingPriceOrder;\\n    uint96 public volumeClearingPriceOrder;\\n    bool public minFundingThresholdNotReached;\\n    bool public isAtomicClosureAllowed;\\n    uint256 public minFundingThreshold;\\n    IterableOrderedOrderSet.Data internal sellOrders;\\n    bool public initialized;\\n\\n    IdToAddressBiMap.Data private registeredUsers;\\n    uint64 public numUsers;\\n\\n    // @dev: function to intiate a new auction\\n    // Warning: In case the auction is expected to raise more than\\n    // 2^96 units of the tokenIn, don't start the auction, as\\n    // it will not be settlable. This corresponds to about 79\\n    // billion DAI.\\n    //\\n    // Prices between tokenIn and tokenOut are expressed by a\\n    // fraction whose components are stored as uint96.\\n    function initAuction(\\n        IERC20 _tokenIn,\\n        IERC20 _tokenOut,\\n        uint256 _orderCancellationEndDate,\\n        uint256 _auctionEndDate,\\n        uint96 _auctionedSellAmount,\\n        uint96 _minBuyAmount,\\n        uint256 _minimumBiddingAmountPerOrder,\\n        uint256 _minFundingThreshold,\\n        bool _isAtomicClosureAllowed,\\n        address _owner\\n    ) internal {\\n        // withdraws sellAmount\\n        initialized = true;\\n        _tokenOut.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            _auctionedSellAmount //[0]\\n        );\\n        require(_auctionedSellAmount > 0, \\\"cannot auction zero tokens\\\");\\n        require(_minBuyAmount > 0, \\\"tokens cannot be auctioned for free\\\");\\n        require(\\n            _minimumBiddingAmountPerOrder > 0,\\n            \\\"minimumBiddingAmountPerOrder is not allowed to be zero\\\"\\n        );\\n        require(\\n            _orderCancellationEndDate <= _auctionEndDate,\\n            \\\"time periods are not configured correctly\\\"\\n        );\\n        require(\\n            _auctionEndDate > block.timestamp,\\n            \\\"auction end date must be in the future\\\"\\n        );\\n        sellOrders.initializeEmptyList();\\n        uint64 userId = getUserId(msg.sender);\\n        owner = _owner;\\n        tokenOut = _tokenOut;\\n        tokenIn = _tokenIn;\\n        orderCancellationEndDate = _orderCancellationEndDate;\\n        auctionEndDate = _auctionEndDate;\\n        initialAuctionOrder = IterableOrderedOrderSet.encodeOrder(\\n            userId,\\n            _minBuyAmount,\\n            _auctionedSellAmount\\n        );\\n        minimumBiddingAmountPerOrder = _minimumBiddingAmountPerOrder;\\n        interimSumBidAmount = 0;\\n        interimOrder = IterableOrderedOrderSet.QUEUE_START;\\n        clearingPriceOrder = bytes32(0);\\n        volumeClearingPriceOrder = 0;\\n        minFundingThresholdNotReached = false;\\n        isAtomicClosureAllowed = _isAtomicClosureAllowed;\\n        minFundingThreshold = _minFundingThreshold;\\n\\n        emit AuctionInitialized(\\n            _tokenOut,\\n            _tokenIn,\\n            _orderCancellationEndDate,\\n            _auctionEndDate,\\n            userId,\\n            _auctionedSellAmount,\\n            _minBuyAmount,\\n            _minimumBiddingAmountPerOrder,\\n            _minFundingThreshold\\n        );\\n    }\\n\\n    function placeSellOrders(\\n        uint96[] memory _minBuyAmounts,\\n        uint96[] memory _sellAmounts,\\n        bytes32[] memory _prevSellOrders\\n    ) external atStageOrderPlacement returns (uint64 userId) {\\n        return\\n            _placeSellOrders(\\n                _minBuyAmounts,\\n                _sellAmounts,\\n                _prevSellOrders,\\n                msg.sender\\n            );\\n    }\\n\\n    function placeSellOrdersOnBehalf(\\n        uint96[] memory _minBuyAmounts,\\n        uint96[] memory _sellAmounts,\\n        bytes32[] memory _prevSellOrders,\\n        address orderSubmitter\\n    ) external atStageOrderPlacement returns (uint64 userId) {\\n        return\\n            _placeSellOrders(\\n                _minBuyAmounts,\\n                _sellAmounts,\\n                _prevSellOrders,\\n                orderSubmitter\\n            );\\n    }\\n\\n    function _placeSellOrders(\\n        uint96[] memory _minBuyAmounts,\\n        uint96[] memory _sellAmounts,\\n        bytes32[] memory _prevSellOrders,\\n        address orderSubmitter\\n    ) internal returns (uint64 userId) {\\n        {\\n            (\\n                ,\\n                uint96 buyAmountOfInitialAuctionOrder,\\n                uint96 sellAmountOfInitialAuctionOrder\\n            ) = initialAuctionOrder.decodeOrder();\\n            for (uint256 i = 0; i < _minBuyAmounts.length; i++) {\\n                require(\\n                    _minBuyAmounts[i].mul(buyAmountOfInitialAuctionOrder) <\\n                        sellAmountOfInitialAuctionOrder.mul(_sellAmounts[i]),\\n                    \\\"limit price not better than mimimal offer\\\"\\n                );\\n            }\\n        }\\n        uint256 sumOfSellAmounts = 0;\\n        userId = getUserId(orderSubmitter);\\n        for (uint256 i = 0; i < _minBuyAmounts.length; i++) {\\n            require(\\n                _minBuyAmounts[i] > 0,\\n                \\\"_minBuyAmounts must be greater than 0\\\"\\n            );\\n            // orders should have a minimum bid size in order to limit the gas\\n            // required to compute the final price of the auction.\\n            require(\\n                _sellAmounts[i] > minimumBiddingAmountPerOrder,\\n                \\\"order too small\\\"\\n            );\\n            if (\\n                sellOrders.insert(\\n                    IterableOrderedOrderSet.encodeOrder(\\n                        userId,\\n                        _minBuyAmounts[i],\\n                        _sellAmounts[i]\\n                    ),\\n                    _prevSellOrders[i]\\n                )\\n            ) {\\n                sumOfSellAmounts = sumOfSellAmounts.add(_sellAmounts[i]);\\n                emit NewSellOrder(userId, _minBuyAmounts[i], _sellAmounts[i]);\\n            }\\n        }\\n        tokenIn.safeTransferFrom(msg.sender, address(this), sumOfSellAmounts); //[1]\\n    }\\n\\n    function cancelSellOrders(bytes32[] memory _sellOrders)\\n        public\\n        atStageOrderPlacementAndCancelation\\n    {\\n        uint64 userId = getUserId(msg.sender);\\n        uint256 claimableAmount = 0;\\n        for (uint256 i = 0; i < _sellOrders.length; i++) {\\n            // Note: we keep the back pointer of the deleted element so that\\n            // it can be used as a reference point to insert a new node.\\n            bool success = sellOrders.removeKeepHistory(_sellOrders[i]);\\n            if (success) {\\n                (\\n                    uint64 userIdOfIter,\\n                    uint96 buyAmountOfIter,\\n                    uint96 sellAmountOfIter\\n                ) = _sellOrders[i].decodeOrder();\\n                require(\\n                    userIdOfIter == userId,\\n                    \\\"Only the user can cancel his orders\\\"\\n                );\\n                claimableAmount = claimableAmount.add(sellAmountOfIter);\\n                emit CancellationSellOrder(\\n                    userId,\\n                    buyAmountOfIter,\\n                    sellAmountOfIter\\n                );\\n            }\\n        }\\n        tokenIn.safeTransfer(msg.sender, claimableAmount); //[2]\\n    }\\n\\n    function precalculateSellAmountSum(uint256 iterationSteps)\\n        public\\n        atStageSolutionSubmission\\n    {\\n        (, , uint96 auctioneerSellAmount) = initialAuctionOrder.decodeOrder();\\n        uint256 sumBidAmount = interimSumBidAmount;\\n        bytes32 iterOrder = interimOrder;\\n\\n        for (uint256 i = 0; i < iterationSteps; i++) {\\n            iterOrder = sellOrders.next(iterOrder);\\n            (, , uint96 sellAmountOfIter) = iterOrder.decodeOrder();\\n            sumBidAmount = sumBidAmount.add(sellAmountOfIter);\\n        }\\n\\n        require(\\n            iterOrder != IterableOrderedOrderSet.QUEUE_END,\\n            \\\"reached end of order list\\\"\\n        );\\n\\n        // it is checked that not too many iteration steps were taken:\\n        // require that the sum of SellAmounts times the price of the last order\\n        // is not more than initially sold amount\\n        (, uint96 buyAmountOfIter, uint96 sellAmountOfIter) = iterOrder\\n            .decodeOrder();\\n        require(\\n            sumBidAmount.mul(buyAmountOfIter) <\\n                auctioneerSellAmount.mul(sellAmountOfIter),\\n            \\\"too many orders summed up\\\"\\n        );\\n\\n        interimSumBidAmount = sumBidAmount;\\n        interimOrder = iterOrder;\\n    }\\n\\n    function settleAuctionAtomically(\\n        uint96[] memory _minBuyAmount,\\n        uint96[] memory _sellAmount,\\n        bytes32[] memory _prevSellOrder\\n    ) public atStageSolutionSubmission {\\n        require(\\n            isAtomicClosureAllowed,\\n            \\\"not allowed to settle auction atomically\\\"\\n        );\\n        require(\\n            _minBuyAmount.length == 1 && _sellAmount.length == 1,\\n            \\\"Only one order can be placed atomically\\\"\\n        );\\n        uint64 userId = getUserId(msg.sender);\\n        require(\\n            interimOrder.smallerThan(\\n                IterableOrderedOrderSet.encodeOrder(\\n                    userId,\\n                    _minBuyAmount[0],\\n                    _sellAmount[0]\\n                )\\n            ),\\n            \\\"precalculateSellAmountSum is already too advanced\\\"\\n        );\\n        _placeSellOrders(\\n            _minBuyAmount,\\n            _sellAmount,\\n            _prevSellOrder,\\n            msg.sender\\n        );\\n        settleAuction();\\n    }\\n\\n    // @dev function settling the auction and calculating the price\\n    function settleAuction()\\n        public\\n        atStageSolutionSubmission\\n        returns (bytes32 clearingOrder)\\n    {\\n        (\\n            uint64 auctioneerId,\\n            uint96 minAuctionedBuyAmount,\\n            uint96 fullAuctionedAmount\\n        ) = initialAuctionOrder.decodeOrder();\\n\\n        uint256 currentBidSum = interimSumBidAmount;\\n        bytes32 currentOrder = interimOrder;\\n        uint256 buyAmountOfIter;\\n        uint256 sellAmountOfIter;\\n        uint96 fillVolumeOfAuctioneerOrder = fullAuctionedAmount;\\n        // Sum order up, until fullAuctionedAmount is fully bought or queue end is reached\\n        do {\\n            bytes32 nextOrder = sellOrders.next(currentOrder);\\n            if (nextOrder == IterableOrderedOrderSet.QUEUE_END) {\\n                break;\\n            }\\n            currentOrder = nextOrder;\\n            (, buyAmountOfIter, sellAmountOfIter) = currentOrder.decodeOrder();\\n            currentBidSum = currentBidSum.add(sellAmountOfIter);\\n        } while (\\n            currentBidSum.mul(buyAmountOfIter) <\\n                fullAuctionedAmount.mul(sellAmountOfIter)\\n        );\\n\\n        if (\\n            currentBidSum > 0 &&\\n            currentBidSum.mul(buyAmountOfIter) >=\\n            fullAuctionedAmount.mul(sellAmountOfIter)\\n        ) {\\n            // All considered/summed orders are sufficient to close the auction fully\\n            // at price between current and previous orders.\\n            uint256 uncoveredBids = currentBidSum.sub(\\n                fullAuctionedAmount.mul(sellAmountOfIter).div(buyAmountOfIter)\\n            );\\n\\n            if (sellAmountOfIter >= uncoveredBids) {\\n                //[13]\\n                // Auction fully filled via partial match of currentOrder\\n                uint256 sellAmountClearingOrder = sellAmountOfIter.sub(\\n                    uncoveredBids\\n                );\\n                volumeClearingPriceOrder = sellAmountClearingOrder.toUint96();\\n                currentBidSum = currentBidSum.sub(uncoveredBids);\\n                clearingOrder = currentOrder;\\n            } else {\\n                //[14]\\n                // Auction fully filled via price strictly between currentOrder and the order\\n                // immediately before. For a proof, see the security-considerations.md\\n                currentBidSum = currentBidSum.sub(sellAmountOfIter);\\n                clearingOrder = IterableOrderedOrderSet.encodeOrder(\\n                    0,\\n                    fullAuctionedAmount,\\n                    currentBidSum.toUint96()\\n                );\\n            }\\n        } else {\\n            // All considered/summed orders are not sufficient to close the auction fully at price of last order //[18]\\n            // Either a higher price must be used or auction is only partially filled\\n\\n            if (currentBidSum > minAuctionedBuyAmount) {\\n                //[15]\\n                // Price higher than last order would fill the auction\\n                clearingOrder = IterableOrderedOrderSet.encodeOrder(\\n                    0,\\n                    fullAuctionedAmount,\\n                    currentBidSum.toUint96()\\n                );\\n            } else {\\n                //[16]\\n                // Even at the initial auction price, the auction is partially filled\\n                clearingOrder = IterableOrderedOrderSet.encodeOrder(\\n                    0,\\n                    fullAuctionedAmount,\\n                    minAuctionedBuyAmount\\n                );\\n                fillVolumeOfAuctioneerOrder = currentBidSum\\n                    .mul(fullAuctionedAmount)\\n                    .div(minAuctionedBuyAmount)\\n                    .toUint96();\\n            }\\n        }\\n        clearingPriceOrder = clearingOrder;\\n\\n        if (minFundingThreshold > currentBidSum) {\\n            minFundingThresholdNotReached = true;\\n        }\\n        emit AuctionCleared(\\n            fillVolumeOfAuctioneerOrder,\\n            uint96(currentBidSum),\\n            clearingOrder\\n        );\\n        // Gas refunds\\n        initialAuctionOrder = bytes32(0);\\n        interimOrder = bytes32(0);\\n        interimSumBidAmount = uint256(0);\\n        minimumBiddingAmountPerOrder = uint256(0);\\n    }\\n\\n    function claimFromParticipantOrder(bytes32[] memory orders)\\n        public\\n        atStageFinished\\n        returns (uint256 sumTokenOutAmount, uint256 sumTokenInAmount)\\n    {\\n        for (uint256 i = 0; i < orders.length; i++) {\\n            // Note: we don't need to keep any information about the node since\\n            // no new elements need to be inserted.\\n            require(\\n                sellOrders.remove(orders[i]),\\n                \\\"order is no longer claimable\\\"\\n            );\\n        }\\n\\n        (, uint96 priceNumerator, uint96 priceDenominator) = clearingPriceOrder\\n            .decodeOrder();\\n        (uint64 userId, , ) = orders[0].decodeOrder();\\n        for (uint256 i = 0; i < orders.length; i++) {\\n            (uint64 userIdOrder, uint96 buyAmount, uint96 sellAmount) = orders[\\n                i\\n            ].decodeOrder();\\n            require(\\n                userIdOrder == userId,\\n                \\\"only allowed to claim for same user\\\"\\n            );\\n            if (minFundingThresholdNotReached) {\\n                //[10]\\n                sumTokenInAmount = sumTokenInAmount.add(sellAmount);\\n            } else {\\n                //[23]\\n                if (orders[i] == clearingPriceOrder) {\\n                    //[25]\\n                    sumTokenOutAmount = sumTokenOutAmount.add(\\n                        volumeClearingPriceOrder.mul(priceNumerator).div(\\n                            priceDenominator\\n                        )\\n                    );\\n                    sumTokenInAmount = sumTokenInAmount.add(\\n                        sellAmount.sub(volumeClearingPriceOrder)\\n                    );\\n                } else {\\n                    if (orders[i].smallerThan(clearingPriceOrder)) {\\n                        //[17]\\n                        sumTokenOutAmount = sumTokenOutAmount.add(\\n                            sellAmount.mul(priceNumerator).div(priceDenominator)\\n                        );\\n                    } else {\\n                        //[24]\\n                        sumTokenInAmount = sumTokenInAmount.add(sellAmount);\\n                    }\\n                }\\n            }\\n            emit ClaimedFromOrder(userId, buyAmount, sellAmount);\\n        }\\n        sendOutTokens(sumTokenOutAmount, sumTokenInAmount, userId); //[3]\\n    }\\n\\n    function init(bytes calldata _data) public notInitialized {\\n        (\\n            IERC20 _tokenIn,\\n            IERC20 _tokenOut,\\n            uint256 _orderCancelationPeriodDuration,\\n            uint256 _duration,\\n            uint96 _totalTokenOutAmount,\\n            uint96 _minBidAmountToReceive,\\n            uint256 _minimumBiddingAmountPerOrder,\\n            uint256 _minSellThreshold,\\n            bool _isAtomicClosureAllowed,\\n            address _owner\\n        ) = abi.decode(\\n                _data,\\n                (\\n                    IERC20,\\n                    IERC20,\\n                    uint256,\\n                    uint256,\\n                    uint96,\\n                    uint96,\\n                    uint256,\\n                    uint256,\\n                    bool,\\n                    address\\n                )\\n            );\\n\\n        initAuction(\\n            _tokenIn,\\n            _tokenOut,\\n            _orderCancelationPeriodDuration,\\n            _duration,\\n            _totalTokenOutAmount,\\n            _minBidAmountToReceive,\\n            _minimumBiddingAmountPerOrder,\\n            _minSellThreshold,\\n            _isAtomicClosureAllowed,\\n            _owner\\n        );\\n    }\\n\\n    function sendOutTokens(\\n        uint256 tokenOutAmount,\\n        uint256 tokenInAmount,\\n        uint64 userId\\n    ) internal {\\n        address userAddress = registeredUsers.getAddressAt(userId);\\n        if (tokenOutAmount > 0) {\\n            tokenOut.safeTransfer(userAddress, tokenOutAmount);\\n        }\\n        if (tokenInAmount > 0) {\\n            tokenIn.safeTransfer(userAddress, tokenInAmount);\\n        }\\n    }\\n\\n    function registerUser(address user) public returns (uint64 userId) {\\n        numUsers = numUsers.add(1).toUint64();\\n        require(\\n            registeredUsers.insert(numUsers, user),\\n            \\\"User already registered\\\"\\n        );\\n        userId = numUsers;\\n        emit UserRegistration(user, userId);\\n    }\\n\\n    function getUserId(address user) public returns (uint64 userId) {\\n        if (registeredUsers.hasAddress(user)) {\\n            userId = registeredUsers.getId(user);\\n        } else {\\n            userId = registerUser(user);\\n            emit NewUser(userId, user);\\n        }\\n    }\\n\\n    function getSecondsRemainingInBatch() public view returns (uint256) {\\n        if (auctionEndDate < block.timestamp) {\\n            return 0;\\n        }\\n        return auctionEndDate.sub(block.timestamp);\\n    }\\n\\n    function containsOrder(bytes32 order) public view returns (bool) {\\n        return sellOrders.contains(order);\\n    }\\n}\\n\",\"keccak256\":\"0xa94124bc607445a4002f96fc6ecef987e4057d1c878f97e64da9149b8adb80a5\",\"license\":\"LGPL-3.0\"},\"contracts/shared/libraries/IdToAddressBiMap.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity ^0.6.0;\\n\\n///////////////////////////////////////////////////////////////////////////////////////////////////////////\\n// Contract does not have test coverage, as it was nearly copied from:\\n// https://github.com/gnosis/solidity-data-structures/blob/master/contracts/libraries/IdToAddressBiMap.sol\\n// The only change is uint16 -> uint64\\n///////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\nlibrary IdToAddressBiMap {\\n    struct Data {\\n        mapping(uint64 => address) idToAddress;\\n        mapping(address => uint64) addressToId;\\n    }\\n\\n    function hasId(Data storage self, uint64 id) internal view returns (bool) {\\n        return self.idToAddress[id + 1] != address(0);\\n    }\\n\\n    function hasAddress(Data storage self, address addr)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return self.addressToId[addr] != 0;\\n    }\\n\\n    function getAddressAt(Data storage self, uint64 id)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        require(hasId(self, id), \\\"Must have ID to get Address\\\");\\n        return self.idToAddress[id + 1];\\n    }\\n\\n    function getId(Data storage self, address addr)\\n        internal\\n        view\\n        returns (uint64)\\n    {\\n        require(hasAddress(self, addr), \\\"Must have Address to get ID\\\");\\n        return self.addressToId[addr] - 1;\\n    }\\n\\n    function insert(\\n        Data storage self,\\n        uint64 id,\\n        address addr\\n    ) internal returns (bool) {\\n        require(addr != address(0), \\\"Cannot insert zero address\\\");\\n        require(id != uint64(-1), \\\"Cannot insert max uint64\\\");\\n        // Ensure bijectivity of the mappings\\n        if (\\n            self.addressToId[addr] != 0 ||\\n            self.idToAddress[id + 1] != address(0)\\n        ) {\\n            return false;\\n        }\\n        self.idToAddress[id + 1] = addr;\\n        self.addressToId[addr] = id + 1;\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x6ab3acc242dd055344af9ce1c1ad6fbd7ef5bb7c8eb506f1aa0d7d3f0f0d8f49\",\"license\":\"LGPL-3.0\"},\"contracts/shared/libraries/IterableOrderedOrderSet.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\n\\npragma solidity >=0.6.8;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nlibrary IterableOrderedOrderSet {\\n    using SafeMath for uint96;\\n    using IterableOrderedOrderSet for bytes32;\\n\\n    // represents smallest possible value for an order under comparison of fn smallerThan()\\n    bytes32 internal constant QUEUE_START =\\n        0x0000000000000000000000000000000000000000000000000000000000000001;\\n    // represents highest possible value for an order under comparison of fn smallerThan()\\n    bytes32 internal constant QUEUE_END =\\n        0xffffffffffffffffffffffffffffffffffffffff000000000000000000000001;\\n\\n    /// The struct is used to implement a modified version of a doubly linked\\n    /// list with sorted elements. The list starts from QUEUE_START to\\n    /// QUEUE_END, and each node keeps track of its predecessor and successor.\\n    /// Nodes can be added or removed.\\n    ///\\n    /// `next` and `prev` have a different role. The list is supposed to be\\n    /// traversed with `next`. If `next` is empty, the node is not part of the\\n    /// list. However, `prev` might be set for elements that are not in the\\n    /// list, which is why it should not be used for traversing. Having a `prev`\\n    /// set for elements not in the list is used to keep track of the history of\\n    /// the position in the list of a removed element.\\n    struct Data {\\n        mapping(bytes32 => bytes32) nextMap;\\n        mapping(bytes32 => bytes32) prevMap;\\n    }\\n\\n    struct Order {\\n        uint64 owner;\\n        uint96 buyAmount;\\n        uint96 sellAmount;\\n    }\\n\\n    function initializeEmptyList(Data storage self) internal {\\n        self.nextMap[QUEUE_START] = QUEUE_END;\\n        self.prevMap[QUEUE_END] = QUEUE_START;\\n    }\\n\\n    function isEmpty(Data storage self) internal view returns (bool) {\\n        return self.nextMap[QUEUE_START] == QUEUE_END;\\n    }\\n\\n    function insert(\\n        Data storage self,\\n        bytes32 elementToInsert,\\n        bytes32 elementBeforeNewOne\\n    ) internal returns (bool) {\\n        (, , uint96 denominator) = decodeOrder(elementToInsert);\\n        require(denominator != uint96(0), \\\"Inserting zero is not supported\\\");\\n        require(\\n            elementToInsert != QUEUE_START && elementToInsert != QUEUE_END,\\n            \\\"Inserting element is not valid\\\"\\n        );\\n        if (contains(self, elementToInsert)) {\\n            return false;\\n        }\\n        if (\\n            elementBeforeNewOne != QUEUE_START &&\\n            self.prevMap[elementBeforeNewOne] == bytes32(0)\\n        ) {\\n            return false;\\n        }\\n        if (!elementBeforeNewOne.smallerThan(elementToInsert)) {\\n            return false;\\n        }\\n\\n        // `elementBeforeNewOne` might have been removed during the time it\\n        // took to the transaction calling this function to be mined, so\\n        // the new order cannot be appended directly to this. We follow the\\n        // history of previous links backwards until we find an element in\\n        // the list from which to start our search.\\n        // Note that following the link backwards returns elements that are\\n        // before `elementBeforeNewOne` in sorted order.\\n        while (self.nextMap[elementBeforeNewOne] == bytes32(0)) {\\n            elementBeforeNewOne = self.prevMap[elementBeforeNewOne];\\n        }\\n\\n        // `elementBeforeNewOne` belongs now to the linked list. We search the\\n        // largest entry that is smaller than the element to insert.\\n        bytes32 previous;\\n        bytes32 current = elementBeforeNewOne;\\n        do {\\n            previous = current;\\n            current = self.nextMap[current];\\n        } while (current.smallerThan(elementToInsert));\\n        // Note: previous < elementToInsert < current\\n        self.nextMap[previous] = elementToInsert;\\n        self.prevMap[current] = elementToInsert;\\n        self.prevMap[elementToInsert] = previous;\\n        self.nextMap[elementToInsert] = current;\\n\\n        return true;\\n    }\\n\\n    /// The element is removed from the linked list, but the node retains\\n    /// information on which predecessor it had, so that a node in the chain\\n    /// can be reached by following the predecessor chain of deleted elements.\\n    function removeKeepHistory(Data storage self, bytes32 elementToRemove)\\n        internal\\n        returns (bool)\\n    {\\n        if (!contains(self, elementToRemove)) {\\n            return false;\\n        }\\n        bytes32 previousElement = self.prevMap[elementToRemove];\\n        bytes32 nextElement = self.nextMap[elementToRemove];\\n        self.nextMap[previousElement] = nextElement;\\n        self.prevMap[nextElement] = previousElement;\\n        self.nextMap[elementToRemove] = bytes32(0);\\n        return true;\\n    }\\n\\n    /// Remove an element from the chain, clearing all related storage.\\n    /// Note that no elements should be inserted using as a reference point a\\n    /// node deleted after calling `remove`, since an element in the `prev`\\n    /// chain might be missing.\\n    function remove(Data storage self, bytes32 elementToRemove)\\n        internal\\n        returns (bool)\\n    {\\n        bool result = removeKeepHistory(self, elementToRemove);\\n        if (result) {\\n            self.prevMap[elementToRemove] = bytes32(0);\\n        }\\n        return result;\\n    }\\n\\n    function contains(Data storage self, bytes32 value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        if (value == QUEUE_START) {\\n            return false;\\n        }\\n        // Note: QUEUE_END is not contained in the list since it has no\\n        // successor.\\n        return self.nextMap[value] != bytes32(0);\\n    }\\n\\n    // @dev orders are ordered by\\n    // 1. their price - buyAmount/sellAmount\\n    // 2. by the sellAmount\\n    // 3. their userId,\\n    function smallerThan(bytes32 orderLeft, bytes32 orderRight)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        (\\n            uint64 userIdLeft,\\n            uint96 priceNumeratorLeft,\\n            uint96 priceDenominatorLeft\\n        ) = decodeOrder(orderLeft);\\n        (\\n            uint64 userIdRight,\\n            uint96 priceNumeratorRight,\\n            uint96 priceDenominatorRight\\n        ) = decodeOrder(orderRight);\\n\\n        if (\\n            priceNumeratorLeft.mul(priceDenominatorRight) <\\n            priceNumeratorRight.mul(priceDenominatorLeft)\\n        ) return true;\\n        if (\\n            priceNumeratorLeft.mul(priceDenominatorRight) >\\n            priceNumeratorRight.mul(priceDenominatorLeft)\\n        ) return false;\\n\\n        if (priceNumeratorLeft < priceNumeratorRight) return true;\\n        if (priceNumeratorLeft > priceNumeratorRight) return false;\\n        require(\\n            userIdLeft != userIdRight,\\n            \\\"user is not allowed to place same order twice\\\"\\n        );\\n        if (userIdLeft < userIdRight) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function first(Data storage self) internal view returns (bytes32) {\\n        require(!isEmpty(self), \\\"Trying to get first from empty set\\\");\\n        return self.nextMap[QUEUE_START];\\n    }\\n\\n    function next(Data storage self, bytes32 value)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        require(value != QUEUE_END, \\\"Trying to get next of last element\\\");\\n        bytes32 nextElement = self.nextMap[value];\\n        require(\\n            nextElement != bytes32(0),\\n            \\\"Trying to get next of non-existent element\\\"\\n        );\\n        return nextElement;\\n    }\\n\\n    function decodeOrder(bytes32 _orderData)\\n        internal\\n        pure\\n        returns (\\n            uint64 userId,\\n            uint96 buyAmount,\\n            uint96 sellAmount\\n        )\\n    {\\n        // Note: converting to uint discards the binary digits that do not fit\\n        // the type.\\n        userId = uint64(uint256(_orderData) >> 192);\\n        buyAmount = uint96(uint256(_orderData) >> 96);\\n        sellAmount = uint96(uint256(_orderData));\\n    }\\n\\n    function encodeOrder(\\n        uint64 userId,\\n        uint96 buyAmount,\\n        uint96 sellAmount\\n    ) internal pure returns (bytes32) {\\n        return\\n            bytes32(\\n                (uint256(userId) << 192) +\\n                    (uint256(buyAmount) << 96) +\\n                    uint256(sellAmount)\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x15d14ca11b7d836e2cd78e24a1f4edcba40de501269d5e555f2a2e3af94e1e73\",\"license\":\"LGPL-3.0\"},\"contracts/shared/libraries/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Logic was copied and modified from here: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/SafeCast.sol\\n */\\nlibrary SafeCast {\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value < 2**96, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value < 2**64, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n}\\n\",\"keccak256\":\"0x9f12a3c511cd8ea260bc8faa7d2e4d59a823328ef07c26af506385aa3e92b200\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612fdf806100206000396000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c80636daf390b11610104578063a90c8c8d116100a2578063d4dda12f11610071578063d4dda12f14610725578063d63bc2a51461072d578063de5f252e146108dd578063f1e2fc4f14610a82576101cf565b8063a90c8c8d14610657578063ac61a28514610674578063b90545ee14610715578063d0202d3b1461071d576101cf565b80638da5cb5b116100de5780638da5cb5b146106375780638eb54efa1461063f57806392f987be14610647578063a4d0a17e1461064f576101cf565b80636daf390b14610466578063724acaac1461048a578063757a1d281461062f576101cf565b806338474ff511610171578063459b72d51161014b578063459b72d51461032c5780634ddf47d41461033457806352b2cf4f146103a45780635f2aee411461045e576101cf565b806338474ff5146102ff5780633d827e0514610307578063422e6fa01461030f576101cf565b80632199d5cd116101ad5780632199d5cd1461022e578063257d33ff146102545780632898f7d11461025c5780632b956ff7146102d9576101cf565b8063158ef93e146101d457806317569c1d146101f057806319a50f491461020a575b600080fd5b6101dc610aa6565b604080519115158252519081900360200190f35b6101f8610aaf565b60408051918252519081900360200190f35b610212610ad6565b604080516001600160401b039092168252519081900360200190f35b6102126004803603602081101561024457600080fd5b50356001600160a01b0316610ae5565b6101f8610bda565b610264610be0565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561029e578181015183820152602001610286565b50505050905090810190601f1680156102cb5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610212600480360360208110156102ef57600080fd5b50356001600160a01b0316610c04565b6101dc610c79565b6101f8610c89565b6101dc6004803603602081101561032557600080fd5b5035610c8f565b6101dc610ca2565b6103a26004803603602081101561034a57600080fd5b810190602081018135600160201b81111561036457600080fd5b82018360208201111561037657600080fd5b803590602001918460018302840111600160201b8311171561039757600080fd5b509092509050610cb2565b005b610445600480360360208110156103ba57600080fd5b810190602081018135600160201b8111156103d457600080fd5b8201836020820111156103e657600080fd5b803590602001918460208302840111600160201b8311171561040757600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610da1945050505050565b6040805192835260208301919091528051918290030190f35b6101f86110c1565b61046e6110c7565b604080516001600160a01b039092168252519081900360200190f35b610212600480360360608110156104a057600080fd5b810190602081018135600160201b8111156104ba57600080fd5b8201836020820111156104cc57600080fd5b803590602001918460208302840111600160201b831117156104ed57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561053c57600080fd5b82018360208201111561054e57600080fd5b803590602001918460208302840111600160201b8311171561056f57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156105be57600080fd5b8201836020820111156105d057600080fd5b803590602001918460208302840111600160201b831117156105f157600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506110d6945050505050565b6101f861112e565b61046e611134565b6101f8611143565b6101f8611149565b6101f861114f565b6103a26004803603602081101561066d57600080fd5b5035611411565b6103a26004803603602081101561068a57600080fd5b810190602081018135600160201b8111156106a457600080fd5b8201836020820111156106b657600080fd5b803590602001918460208302840111600160201b831117156106d757600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506115d4945050505050565b6101f8611759565b61046e61175f565b6101f861176e565b6102126004803603608081101561074357600080fd5b810190602081018135600160201b81111561075d57600080fd5b82018360208201111561076f57600080fd5b803590602001918460208302840111600160201b8311171561079057600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156107df57600080fd5b8201836020820111156107f157600080fd5b803590602001918460208302840111600160201b8311171561081257600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561086157600080fd5b82018360208201111561087357600080fd5b803590602001918460208302840111600160201b8311171561089457600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550505090356001600160a01b031691506117749050565b6103a2600480360360608110156108f357600080fd5b810190602081018135600160201b81111561090d57600080fd5b82018360208201111561091f57600080fd5b803590602001918460208302840111600160201b8311171561094057600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561098f57600080fd5b8201836020820111156109a157600080fd5b803590602001918460208302840111600160201b831117156109c257600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b811115610a1157600080fd5b820183602082011115610a2357600080fd5b803590602001918460208302840111600160201b83111715610a4457600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506117cb945050505050565b610a8a61195d565b604080516001600160601b039092168252519081900360200190f35b600e5460ff1681565b6000426004541015610ac357506000610ad3565b600454610ad0904261196c565b90505b90565b6011546001600160401b031681565b601154600090610b0890610b03906001600160401b031660016119c9565b611a23565b6011805467ffffffffffffffff19166001600160401b039283161790819055610b3591600f911684611a70565b610b86576040805162461bcd60e51b815260206004820152601760248201527f5573657220616c72656164792072656769737465726564000000000000000000604482015290519081900360640190fd5b50601154604080516001600160401b03909216808352905190916001600160a01b038416917f6838f67cb358c332087b73dbe769a6c869a5f87225236c16dda5d0013a77074c9181900360200190a2919050565b60085481565b604051806040016040528060088152602001674661697253616c6560c01b81525081565b6000610c11600f83611be8565b15610c2857610c21600f83611c12565b9050610c74565b610c3182610ae5565b9050816001600160a01b0316816001600160401b03167f969d438b19b6b5fb3c0d3c6f16867e519fcec4233799d6be29d1c00f2045ba2660405160405180910390a35b919050565b600a54600160601b900460ff1681565b60045481565b6000610c9c600c83611c9c565b92915050565b600a54600160681b900460ff1681565b600e5460ff1615610d00576040805162461bcd60e51b8152602060048201526013602482015272185b1c9958591e481a5b9a5d1a585b1a5e9959606a1b604482015290519081900360640190fd5b6000806000806000806000806000808b8b610140811015610d2057600080fd5b506001600160a01b03813581169b50602082013581169a5060408201359950606082013598506001600160601b0360808301358116985060a083013516965060c0820135955060e082013594506101008201351515935061012090910135169050610d938a8a8a8a8a8a8a8a8a8a611cc5565b505050505050505050505050565b6009546000908190610dfa576040805162461bcd60e51b815260206004820152601860248201527f41756374696f6e206e6f74207965742066696e69736865640000000000000000604482015290519081900360640190fd5b60005b8351811015610e8657610e2d848281518110610e1557fe5b6020026020010151600c611f8390919063ffffffff16565b610e7e576040805162461bcd60e51b815260206004820152601c60248201527f6f72646572206973206e6f206c6f6e67657220636c61696d61626c6500000000604482015290519081900360640190fd5b600101610dfd565b50600080610e95600954611faf565b92509250506000610eb986600081518110610eac57fe5b6020026020010151611faf565b5050905060005b86518110156110ad576000806000610edd8a8581518110610eac57fe5b925092509250846001600160401b0316836001600160401b031614610f335760405162461bcd60e51b8152600401808060200182810382526023815260200180612e946023913960400191505060405180910390fd5b600a54600160601b900460ff1615610f5f57610f58886001600160601b0383166119c9565b9750611055565b6009548a8581518110610f6e57fe5b60200260200101511415610fd657600a54610faf90610fa8906001600160601b03808a1691610fa291908116908c16611fbe565b90612017565b8a906119c9565b600a54909950610f5890610fcf906001600160601b03848116911661196c565b89906119c9565b610ffe6009548b8681518110610fe857fe5b602002602001015161207e90919063ffffffff16565b1561103f57611038610fa8876001600160601b0316610fa28a6001600160601b0316856001600160601b0316611fbe90919063ffffffff16565b9850611055565b611052886001600160601b0383166119c9565b97505b604080516001600160601b0380851682528316602082015281516001600160401b038816927ff75ff0412dab9132bc6907f911ff4b016eef8911771400efa692b1868162700f928290030190a2505050600101610ec0565b506110b9858583612205565b505050915091565b60095481565b6002546001600160a01b031681565b600060045442106111185760405162461bcd60e51b8152600401808060200182810382526022815260200180612f886022913960400191505060405180910390fd5b61112484848433612254565b90505b9392505050565b60065481565b6000546001600160a01b031681565b600b5481565b60055481565b60045460009080158015906111645750804210155b80156111705750600954155b6111ab5760405162461bcd60e51b8152600401808060200182810382526028815260200180612eb76028913960400191505060405180910390fd5b5060008060006111bc600554611faf565b600754600854939650919450925090600080845b60006111dd600c86612532565b90506002600160601b03198114156111f55750611244565b80945061120185611faf565b6001600160601b03918216965016935061121d905086846119c9565b955061123490506001600160601b03871683611fbe565b61123e8685611fbe565b106111d0575b60008511801561126f57506112626001600160601b03871683611fbe565b61126c8685611fbe565b10155b1561131a57600061129761129085610fa26001600160601b038b1687611fbe565b879061196c565b90508083106112f15760006112ac848361196c565b90506112b7816125c6565b600a80546bffffffffffffffffffffffff19166001600160601b03929092169190911790556112e6878361196c565b9650859a5050611314565b6112fb868461196c565b955061131160008861130c896125c6565b61260a565b99505b50611383565b866001600160601b03168511156113415761133a60008761130c886125c6565b9850611383565b61134d6000878961260a565b985061138061137b886001600160601b0316610fa2896001600160601b031689611fbe90919063ffffffff16565b6125c6565b90505b6009899055600b548510156113a657600a805460ff60601b1916600160601b1790555b604080516001600160601b038084168252871660208201528082018b905290517f7fbd6633ec7ba81b40067a45fe5b8351c03e9e3765569f20247044ec4247b5319181900360600190a150506000600581905560088190556007819055600655509495945050505050565b60045480158015906114235750804210155b801561142f5750600954155b61146a5760405162461bcd60e51b8152600401808060200182810382526028815260200180612eb76028913960400191505060405180910390fd5b506000611478600554611faf565b6007546008549194509250905060005b848110156114cc5761149b600c83612532565b915060006114a883611faf565b92506114c191508590506001600160601b0383166119c9565b935050600101611488565b506002600160601b031981141561152a576040805162461bcd60e51b815260206004820152601960248201527f7265616368656420656e64206f66206f72646572206c69737400000000000000604482015290519081900360640190fd5b60008061153683611faf565b9250925050611560816001600160601b0316866001600160601b0316611fbe90919063ffffffff16565b611573856001600160601b038516611fbe565b106115c5576040805162461bcd60e51b815260206004820152601960248201527f746f6f206d616e79206f72646572732073756d6d656420757000000000000000604482015290519081900360640190fd5b50506007919091556008555050565b60035442106116145760405162461bcd60e51b8152600401808060200182810382526032815260200180612d276032913960400191505060405180910390fd5b600061161f33610c04565b90506000805b835181101561173c57600061165785838151811061163f57fe5b6020026020010151600c61264290919063ffffffff16565b90508015611733576000806000611673888681518110610eac57fe5b925092509250866001600160401b0316836001600160401b0316146116c95760405162461bcd60e51b8152600401808060200182810382526023815260200180612ce16023913960400191505060405180910390fd5b6116dc866001600160601b0383166119c9565b604080516001600160601b0380861682528416602082015281519298506001600160401b038a16927f5dedfbcaa0c7efd84558aac37ed1d1023367d9aa24a3dc41d011d013d3218ab7929181900390910190a25050505b50600101611625565b50600254611754906001600160a01b03163383612697565b505050565b60035481565b6001546001600160a01b031681565b60075481565b600060045442106117b65760405162461bcd60e51b8152600401808060200182810382526022815260200180612f886022913960400191505060405180910390fd5b6117c285858585612254565b95945050505050565b60045480158015906117dd5750804210155b80156117e95750600954155b6118245760405162461bcd60e51b8152600401808060200182810382526028815260200180612eb76028913960400191505060405180910390fd5b50600a54600160681b900460ff1661186d5760405162461bcd60e51b8152600401808060200182810382526028815260200180612c886028913960400191505060405180910390fd5b8251600114801561187f575081516001145b6118ba5760405162461bcd60e51b8152600401808060200182810382526027815260200180612dc66027913960400191505060405180910390fd5b60006118c533610c04565b90506119066118fd82866000815181106118db57fe5b6020026020010151866000815181106118f057fe5b602002602001015161260a565b6008549061207e565b6119415760405162461bcd60e51b8152600401808060200182810382526031815260200180612cb06031913960400191505060405180910390fd5b61194d84848433612254565b5061195661114f565b5050505050565b600a546001600160601b031681565b6000828211156119c3576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b600082820183811015611127576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000680100000000000000008210611a6c5760405162461bcd60e51b8152600401808060200182810382526026815260200180612e6e6026913960400191505060405180910390fd5b5090565b60006001600160a01b038216611acd576040805162461bcd60e51b815260206004820152601a60248201527f43616e6e6f7420696e73657274207a65726f2061646472657373000000000000604482015290519081900360640190fd5b6001600160401b038381161415611b2b576040805162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420696e73657274206d61782075696e7436340000000000000000604482015290519081900360640190fd5b6001600160a01b03821660009081526001850160205260409020546001600160401b0316151580611b7f57506001600160401b0360018401166000908152602085905260409020546001600160a01b031615155b15611b8c57506000611127565b5060019182016001600160401b031660008181526020858152604080832080546001600160a01b0319166001600160a01b039690961695861790559382529484019094529220805467ffffffffffffffff191690921790915590565b6001600160a01b0316600090815260019190910160205260409020546001600160401b0316151590565b6000611c1e8383611be8565b611c6f576040805162461bcd60e51b815260206004820152601b60248201527f4d7573742068617665204164647265737320746f206765742049440000000000604482015290519081900360640190fd5b506001600160a01b0316600090815260019190910160205260409020546001600160401b03166000190190565b60006001821415611caf57506000610c9c565b5060009081526020919091526040902054151590565b600e805460ff19166001179055611cf06001600160a01b038a1633306001600160601b038a166126e9565b6000866001600160601b031611611d4e576040805162461bcd60e51b815260206004820152601a60248201527f63616e6e6f742061756374696f6e207a65726f20746f6b656e73000000000000604482015290519081900360640190fd5b6000856001600160601b031611611d965760405162461bcd60e51b8152600401808060200182810382526023815260200180612d046023913960400191505060405180910390fd5b60008411611dd55760405162461bcd60e51b8152600401808060200182810382526036815260200180612e176036913960400191505060405180910390fd5b86881115611e145760405162461bcd60e51b8152600401808060200182810382526029815260200180612f356029913960400191505060405180910390fd5b428711611e525760405162461bcd60e51b8152600401808060200182810382526026815260200180612da06026913960400191505060405180910390fd5b611e5c600c612743565b6000611e6733610c04565b600080546001600160a01b038086166001600160a01b031992831617909255600180548e841690831617905560028054928f169290911691909117905560038a905560048990559050611ebb81878961260a565b6005556006859055600060078190556001600855600955600a80546dffffffffffffffffffffffffffff1916600160681b85151502179055600b849055604080518a8152602081018a90526001600160401b038316818301526001600160601b0389811660608301528816608082015260a0810187905260c0810186905290516001600160a01b038d811692908d16917f6fd1d7194ddf00deb0b9859cbdd1853d720493e643d37af7a2923b0b41de7dde9160e0908290030190a35050505050505050505050565b600080611f908484612642565b9050801561112757600092835260019390930160205250604081205590565b60c081901c91606082901c9190565b600082611fcd57506000610c9c565b82820282848281611fda57fe5b04146111275760405162461bcd60e51b8152600401808060200182810382526021815260200180612e4d6021913960400191505060405180910390fd5b600080821161206d576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161207657fe5b049392505050565b60008060008061208d86611faf565b92509250925060008060006120a188611faf565b919450925090506120be6001600160601b03808416908616611fbe565b6120d46001600160601b03878116908416611fbe565b10156120e95760019650505050505050610c9c565b6120ff6001600160601b03838116908616611fbe565b6121156001600160601b03878116908416611fbe565b111561212a5760009650505050505050610c9c565b816001600160601b0316856001600160601b031610156121535760019650505050505050610c9c565b816001600160601b0316856001600160601b0316111561217c5760009650505050505050610c9c565b826001600160401b0316866001600160401b031614156121cd5760405162461bcd60e51b815260040180806020018281038252602d815260200180612edf602d913960400191505060405180910390fd5b826001600160401b0316866001600160401b031610156121f65760019650505050505050610c9c565b50600098975050505050505050565b6000612212600f8361276f565b9050831561223157600154612231906001600160a01b03168286612697565b821561224e5760025461224e906001600160a01b03168285612697565b50505050565b6000806000612264600554611faf565b925092505060005b8751811015612329576122ad87828151811061228457fe5b60200260200101516001600160601b0316836001600160601b0316611fbe90919063ffffffff16565b6122e5846001600160601b03168a84815181106122c657fe5b60200260200101516001600160601b0316611fbe90919063ffffffff16565b106123215760405162461bcd60e51b8152600401808060200182810382526029815260200180612f0c6029913960400191505060405180910390fd5b60010161226c565b505050600061233783610c04565b915060005b865181101561251057600087828151811061235357fe5b60200260200101516001600160601b0316116123a05760405162461bcd60e51b8152600401808060200182810382526025815260200180612d596025913960400191505060405180910390fd5b6006548682815181106123af57fe5b60200260200101516001600160601b031611612404576040805162461bcd60e51b815260206004820152600f60248201526e1bdc99195c881d1bdbc81cdb585b1b608a1b604482015290519081900360640190fd5b61245061242b8489848151811061241757fe5b60200260200101518985815181106118f057fe5b86838151811061243757fe5b6020026020010151600c6127f59092919063ffffffff16565b156125085761248486828151811061246457fe5b60200260200101516001600160601b0316836119c990919063ffffffff16565b9150826001600160401b03167fd281bd4d955b901e3f3d9e94325fd93f97f2a20f3acfd0e0c52eec553208f4958883815181106124bd57fe5b60200260200101518884815181106124d157fe5b602002602001015160405180836001600160601b03168152602001826001600160601b031681526020019250505060405180910390a25b60010161233c565b50600254612529906001600160a01b03163330846126e9565b50949350505050565b60006002600160601b031982141561257b5760405162461bcd60e51b8152600401808060200182810382526022815260200180612d7e6022913960400191505060405180910390fd5b600082815260208490526040902054806111275760405162461bcd60e51b815260040180806020018281038252602a815260200180612ded602a913960400191505060405180910390fd5b6000600160601b8210611a6c5760405162461bcd60e51b8152600401808060200182810382526026815260200180612c626026913960400191505060405180910390fd5b6001600160c01b031960c084901b166bffffffffffffffffffffffff60601b606084901b16016001600160601b038216019392505050565b600061264e8383611c9c565b61265a57506000610c9c565b5060008181526001838101602081815260408085205487835281862080548288528388208190558752938352908520559383529390925290915590565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526117549084906129b6565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b17905261224e9085906129b6565b60016000818152602083815260408083206002600160601b031990819055835293830190529190912055565b600061277b8383612a67565b6127cc576040805162461bcd60e51b815260206004820152601b60248201527f4d757374206861766520494420746f2067657420416464726573730000000000604482015290519081900360640190fd5b506001016001600160401b0316600090815260209190915260409020546001600160a01b031690565b60008061280184611faf565b925050506001600160601b038116612860576040805162461bcd60e51b815260206004820152601f60248201527f496e73657274696e67207a65726f206973206e6f7420737570706f7274656400604482015290519081900360640190fd5b6001841480159061287957506002600160601b03198414155b6128ca576040805162461bcd60e51b815260206004820152601e60248201527f496e73657274696e6720656c656d656e74206973206e6f742076616c69640000604482015290519081900360640190fd5b6128d48585611c9c565b156128e3576000915050611127565b6001831480159061290257506000838152600186016020526040902054155b15612911576000915050611127565b61291b838561207e565b612929576000915050611127565b5b600083815260208690526040902054612955576000928352600185016020526040909220549161292a565b6000835b600081815260208890526040902054909150612975818761207e565b612959576000828152602088815260408083208990558383526001808b0183528184208a905589845281842095909555908990529020559150509392505050565b6060612a0b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612a919092919063ffffffff16565b80519091501561175457808060200190516020811015612a2a57600080fd5b50516117545760405162461bcd60e51b815260040180806020018281038252602a815260200180612f5e602a913960400191505060405180910390fd5b6001016001600160401b0316600090815260209190915260409020546001600160a01b0316151590565b6060611124848460008585612aa585612bb7565b612af6576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310612b355780518252601f199092019160209182019101612b16565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612b97576040519150601f19603f3d011682016040523d82523d6000602084013e612b9c565b606091505b5091509150612bac828286612bbd565b979650505050505050565b3b151590565b60608315612bcc575081611127565b825115612bdc5782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612c26578181015183820152602001612c0e565b50505050905090810190601f168015612c535780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe53616665436173743a2076616c756520646f65736e27742066697420696e20393620626974736e6f7420616c6c6f77656420746f20736574746c652061756374696f6e2061746f6d6963616c6c7970726563616c63756c61746553656c6c416d6f756e7453756d20697320616c726561647920746f6f20616476616e6365644f6e6c792074686520757365722063616e2063616e63656c20686973206f7264657273746f6b656e732063616e6e6f742062652061756374696f6e656420666f7220667265656e6f206c6f6e67657220696e206f7264657220706c6163656d656e7420616e642063616e63656c6174696f6e2070686173655f6d696e427579416d6f756e7473206d7573742062652067726561746572207468616e2030547279696e6720746f20676574206e657874206f66206c61737420656c656d656e7461756374696f6e20656e642064617465206d75737420626520696e20746865206675747572654f6e6c79206f6e65206f726465722063616e20626520706c616365642061746f6d6963616c6c79547279696e6720746f20676574206e657874206f66206e6f6e2d6578697374656e7420656c656d656e746d696e696d756d42696464696e67416d6f756e745065724f72646572206973206e6f7420616c6c6f77656420746f206265207a65726f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7753616665436173743a2076616c756520646f65736e27742066697420696e20363420626974736f6e6c7920616c6c6f77656420746f20636c61696d20666f722073616d65207573657241756374696f6e206e6f7420696e20736f6c7574696f6e207375626d697373696f6e20706861736575736572206973206e6f7420616c6c6f77656420746f20706c6163652073616d65206f726465722074776963656c696d6974207072696365206e6f7420626574746572207468616e206d696d696d616c206f6666657274696d6520706572696f647320617265206e6f7420636f6e6669677572656420636f72726563746c795361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565646e6f206c6f6e67657220696e206f7264657220706c6163656d656e74207068617365a264697066735822122070b153567cd99f16d0a2a93a596a1dd0cbf78be9f8050a9012e16bf25a869f2f64736f6c634300060c0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2414,
        "contract": "contracts/sales/FairSale.sol:FairSale",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2416,
        "contract": "contracts/sales/FairSale.sol:FairSale",
        "label": "tokenOut",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)1305"
      },
      {
        "astId": 2418,
        "contract": "contracts/sales/FairSale.sol:FairSale",
        "label": "tokenIn",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)1305"
      },
      {
        "astId": 2420,
        "contract": "contracts/sales/FairSale.sol:FairSale",
        "label": "orderCancellationEndDate",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2422,
        "contract": "contracts/sales/FairSale.sol:FairSale",
        "label": "auctionEndDate",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 2424,
        "contract": "contracts/sales/FairSale.sol:FairSale",
        "label": "initialAuctionOrder",
        "offset": 0,
        "slot": "5",
        "type": "t_bytes32"
      },
      {
        "astId": 2426,
        "contract": "contracts/sales/FairSale.sol:FairSale",
        "label": "minimumBiddingAmountPerOrder",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 2428,
        "contract": "contracts/sales/FairSale.sol:FairSale",
        "label": "interimSumBidAmount",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 2430,
        "contract": "contracts/sales/FairSale.sol:FairSale",
        "label": "interimOrder",
        "offset": 0,
        "slot": "8",
        "type": "t_bytes32"
      },
      {
        "astId": 2432,
        "contract": "contracts/sales/FairSale.sol:FairSale",
        "label": "clearingPriceOrder",
        "offset": 0,
        "slot": "9",
        "type": "t_bytes32"
      },
      {
        "astId": 2434,
        "contract": "contracts/sales/FairSale.sol:FairSale",
        "label": "volumeClearingPriceOrder",
        "offset": 0,
        "slot": "10",
        "type": "t_uint96"
      },
      {
        "astId": 2436,
        "contract": "contracts/sales/FairSale.sol:FairSale",
        "label": "minFundingThresholdNotReached",
        "offset": 12,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 2438,
        "contract": "contracts/sales/FairSale.sol:FairSale",
        "label": "isAtomicClosureAllowed",
        "offset": 13,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 2440,
        "contract": "contracts/sales/FairSale.sol:FairSale",
        "label": "minFundingThreshold",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 2442,
        "contract": "contracts/sales/FairSale.sol:FairSale",
        "label": "sellOrders",
        "offset": 0,
        "slot": "12",
        "type": "t_struct(Data)5388_storage"
      },
      {
        "astId": 2444,
        "contract": "contracts/sales/FairSale.sol:FairSale",
        "label": "initialized",
        "offset": 0,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 2446,
        "contract": "contracts/sales/FairSale.sol:FairSale",
        "label": "registeredUsers",
        "offset": 0,
        "slot": "15",
        "type": "t_struct(Data)5197_storage"
      },
      {
        "astId": 2448,
        "contract": "contracts/sales/FairSale.sol:FairSale",
        "label": "numUsers",
        "offset": 0,
        "slot": "17",
        "type": "t_uint64"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)1305": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint64)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint64)",
        "numberOfBytes": "32",
        "value": "t_uint64"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint64,t_address)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_struct(Data)5197_storage": {
        "encoding": "inplace",
        "label": "struct IdToAddressBiMap.Data",
        "members": [
          {
            "astId": 5192,
            "contract": "contracts/sales/FairSale.sol:FairSale",
            "label": "idToAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint64,t_address)"
          },
          {
            "astId": 5196,
            "contract": "contracts/sales/FairSale.sol:FairSale",
            "label": "addressToId",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint64)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Data)5388_storage": {
        "encoding": "inplace",
        "label": "struct IterableOrderedOrderSet.Data",
        "members": [
          {
            "astId": 5383,
            "contract": "contracts/sales/FairSale.sol:FairSale",
            "label": "nextMap",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_bytes32,t_bytes32)"
          },
          {
            "astId": 5387,
            "contract": "contracts/sales/FairSale.sol:FairSale",
            "label": "prevMap",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_bytes32)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}