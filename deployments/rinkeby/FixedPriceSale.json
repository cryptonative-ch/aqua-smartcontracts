{
  "address": "0x6cd41f18971b67db155119Df6Af5A15CAFccA5f0",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "NewCommitment",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "NewTokenRelease",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "NewTokenWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "SaleClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensForSale",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startDate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endDate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minCommitment",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxCommitment",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minRaise",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "participantList",
          "type": "address"
        }
      ],
      "name": "SaleInitialized",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ERC20Withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ETHWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TEMPLATE_NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closeSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "commitTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "commitment",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isMinRaiseReached",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isSaleEnded",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "remainingTokensForSale",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "saleInfo",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokensForSale",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minCommitment",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxCommitment",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minRaise",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "hasParticipantList",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "participantList",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "saleStatus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokensCommitted",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isClosed",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "saleSucceeded",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "initialized",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "secondsRemainingInSale",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "withdrawTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xe2f2c1c0666e7d374e9f2f5cb0717296c0259cb950d4773ed6b18feeaeecf0e3",
  "receipt": {
    "to": null,
    "from": "0xA601aeD34dda12fF760d8ABb64Fd4Eb3664E35Af",
    "contractAddress": "0x6cd41f18971b67db155119Df6Af5A15CAFccA5f0",
    "transactionIndex": 24,
    "gasUsed": "1619417",
    "logsBloom": "0x
    "blockHash": "0x7c68f9834337fad5f535f0bc3b469262c975c0f010cf065fc0e497e02e0801d2",
    "transactionHash": "0xe2f2c1c0666e7d374e9f2f5cb0717296c0259cb950d4773ed6b18feeaeecf0e3",
    "logs": [],
    "blockNumber": 9142306,
    "cumulativeGasUsed": "13665606",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "3b69c23e6cc50e18a8a29a4bfccc15fd",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewCommitment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewTokenRelease\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewTokenWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SaleClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensForSale\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minCommitment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxCommitment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minRaise\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"participantList\",\"type\":\"address\"}],\"name\":\"SaleInitialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC20Withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ETHWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TEMPLATE_NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"commitTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"commitment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMinRaiseReached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSaleEnded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainingTokensForSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensForSale\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minCommitment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxCommitment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minRaise\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasParticipantList\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"participantList\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokensCommitted\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isClosed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"saleSucceeded\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondsRemainingInSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"ERC20Withdraw(address,uint256)\":{\"details\":\"withdraw any ERC20 token by owner\",\"params\":{\"amount\":\"Amount to withdraw\",\"token\":\"ERC20 token address\"}},\"ETHWithdraw(uint256)\":{\"details\":\"withdraw ETH token by owner\",\"params\":{\"amount\":\"ETH amount to withdraw\"}},\"closeSale()\":{\"details\":\"close sale if either minRaise is reached or endDate passed\"},\"commitTokens(uint256)\":{\"details\":\"reserve tokens for a fixed price\",\"params\":{\"amount\":\"of tokenIn to buy at a fixed price\"}},\"init(bytes)\":{\"details\":\"init function expexted to be called by SaleLauncher to init the sale\",\"params\":{\"_data\":\"encoded init params\"}},\"remainingTokensForSale()\":{\"details\":\"to get remaining token at any point of the sale\"},\"secondsRemainingInSale()\":{\"details\":\"to get the remaining time of the sale in seconds\"},\"withdrawTokens(address)\":{\"details\":\"withdraws purchased tokens if sale successfull, if not releases committed tokens\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/sales/FixedPriceSale.sol\":\"FixedPriceSale\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0x363bd3b45201f07c9b71c2edc96533468cf14a3d029fabd82fddceb1eb3ebd9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"contracts/sales/FixedPriceSale.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity >=0.6.8;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"../shared/libraries/TransferHelper.sol\\\";\\nimport \\\"../shared/interfaces/IParticipantList.sol\\\";\\n\\ncontract FixedPriceSale {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint64;\\n    using SafeMath for uint96;\\n    using SafeMath for uint256;\\n\\n    modifier notInitialized() {\\n        require(!saleStatus.initialized, \\\"already initialized\\\");\\n        _;\\n    }\\n\\n    event SaleInitialized(\\n        IERC20 tokenIn,\\n        IERC20 tokenOut,\\n        uint256 tokenPrice,\\n        uint256 tokensForSale,\\n        uint256 startDate,\\n        uint256 endDate,\\n        uint256 minCommitment,\\n        uint256 maxCommitment,\\n        uint256 minRaise,\\n        address owner,\\n        address participantList\\n    );\\n    event NewCommitment(address indexed user, uint256 indexed amount);\\n    event NewTokenWithdraw(address indexed user, uint256 indexed amount);\\n    event NewTokenRelease(address indexed user, uint256 indexed amount);\\n    event SaleClosed();\\n\\n    string public constant TEMPLATE_NAME = \\\"FixedPriceSale\\\";\\n    address public owner;\\n\\n    struct SaleInfo {\\n        IERC20 tokenIn;\\n        IERC20 tokenOut;\\n        uint256 tokenPrice;\\n        uint256 tokensForSale;\\n        uint256 startDate;\\n        uint256 endDate;\\n        uint256 minCommitment;\\n        uint256 maxCommitment;\\n        uint256 minRaise;\\n        bool hasParticipantList;\\n        address participantList;\\n    }\\n\\n    struct SaleStatus {\\n        uint256 tokensCommitted;\\n        bool isClosed;\\n        bool saleSucceeded;\\n        bool initialized;\\n    }\\n\\n    SaleInfo public saleInfo;\\n    SaleStatus public saleStatus;\\n    mapping(address => uint256) public commitment;\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"FixedPriceSale: FORBIDDEN\\\");\\n        _;\\n    }\\n\\n    /// @dev internal setup function to initialize the template, called by init()\\n    /// @param _tokenIn token to make the bid in\\n    /// @param _tokenOut token to buy\\n    /// @param _tokenPrice fixed token price\\n    /// @param _tokensForSale amount of tokens to be sold\\n    /// @param _startDate start date\\n    /// @param _endDate end date\\n    /// @param _minCommitment minimum tokenIn to buy\\n    /// @param _maxCommitment maximum tokenIn to buy\\n    /// @param _minRaise minimum amount an project is expected to raise, amount of tokenIn\\n    /// @param _owner owner of the sale\\n    /// @param _participantList owner of the sale\\n    function initSale(\\n        IERC20 _tokenIn,\\n        IERC20 _tokenOut,\\n        uint256 _tokenPrice,\\n        uint256 _tokensForSale,\\n        uint256 _startDate,\\n        uint256 _endDate,\\n        uint256 _minCommitment,\\n        uint256 _maxCommitment,\\n        uint256 _minRaise,\\n        address _owner,\\n        address _participantList\\n    ) internal {\\n        require(_tokenIn != _tokenOut, \\\"FixedPriceSale: invalid tokens\\\");\\n        require(_tokenPrice > 0, \\\"FixedPriceSale: invalid tokenPrice\\\");\\n        require(_tokensForSale > 0, \\\"FixedPriceSale: invalid tokensForSale\\\");\\n        require(\\n            _startDate > block.timestamp || _startDate == 0,\\n            \\\"FixedPriceSale: invalid startDate\\\"\\n        );\\n        require(\\n            _endDate > _startDate || _endDate == 0,\\n            \\\"FixedPriceSale: invalid endDate\\\"\\n        );\\n        saleStatus.initialized = true;\\n        saleInfo.tokenIn = _tokenIn;\\n        saleInfo.tokenOut = _tokenOut;\\n        saleInfo.tokenPrice = _tokenPrice;\\n        saleInfo.tokensForSale = _tokensForSale;\\n        saleInfo.startDate = _startDate;\\n        saleInfo.endDate = _endDate;\\n        saleInfo.minCommitment = _minCommitment;\\n        saleInfo.maxCommitment = _maxCommitment;\\n        saleInfo.minRaise = _minRaise;\\n        if (_participantList != address(0)) {\\n            saleInfo.participantList = _participantList;\\n            saleInfo.hasParticipantList = true;\\n        }\\n        owner = _owner;\\n        saleInfo.tokenOut.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            saleInfo.tokensForSale\\n        );\\n\\n        emit SaleInitialized(\\n            _tokenIn,\\n            _tokenOut,\\n            _tokenPrice,\\n            _tokensForSale,\\n            _startDate,\\n            _endDate,\\n            _minCommitment,\\n            _maxCommitment,\\n            _minRaise,\\n            _owner,\\n            _participantList\\n        );\\n    }\\n\\n    /// @dev reserve tokens for a fixed price\\n    /// @param amount of tokenIn to buy at a fixed price\\n    function commitTokens(uint256 amount) public {\\n        require(!saleStatus.isClosed, \\\"FixedPriceSale: sale closed\\\");\\n        require(\\n            amount >= saleInfo.minCommitment,\\n            \\\"FixedPriceSale: amount to low\\\"\\n        );\\n        require(\\n            saleInfo.maxCommitment == 0 ||\\n                commitment[msg.sender].add(amount) <= saleInfo.maxCommitment,\\n            \\\"FixedPriceSale: maxCommitment reached\\\"\\n        );\\n        require(\\n            block.timestamp > saleInfo.startDate,\\n            \\\"FixedPriceSale: sale not started\\\"\\n        );\\n        require(\\n            block.timestamp < saleInfo.endDate,\\n            \\\"FixedPriceSale: deadline passed\\\"\\n        );\\n        require(\\n            _getTokenAmount(saleStatus.tokensCommitted.add(amount)) <=\\n                saleInfo.tokensForSale,\\n            \\\"FixedPriceSale: sale sold out\\\"\\n        );\\n        if (saleInfo.hasParticipantList) {\\n            require(\\n                IParticipantList(saleInfo.participantList).isInList(msg.sender),\\n                \\\"FixedPriceSale: account not allowed\\\"\\n            );\\n        }\\n        saleInfo.tokenIn.safeTransferFrom(msg.sender, address(this), amount);\\n        commitment[msg.sender] = commitment[msg.sender].add(amount);\\n\\n        saleStatus.tokensCommitted = saleStatus.tokensCommitted.add(amount);\\n        emit NewCommitment(msg.sender, amount);\\n\\n        if (isSaleEnded()) {\\n            closeSale();\\n        }\\n    }\\n\\n    /// @dev close sale if either minRaise is reached or endDate passed\\n    function closeSale() public {\\n        require(!saleStatus.isClosed, \\\"FixedPriceSale: already closed\\\");\\n        require(\\n            block.timestamp > saleInfo.endDate ||\\n                _getTokenAmount(saleStatus.tokensCommitted) ==\\n                saleInfo.tokensForSale,\\n            \\\"FixedPriceSale: sale cannot be closed\\\"\\n        );\\n\\n        saleStatus.isClosed = true;\\n        if (isMinRaiseReached()) {\\n            saleStatus.saleSucceeded = true;\\n            TransferHelper.safeTransfer(\\n                address(saleInfo.tokenIn),\\n                owner,\\n                saleStatus.tokensCommitted\\n            );\\n            uint256 soldTokens = _getTokenAmount(saleStatus.tokensCommitted);\\n            uint256 unsoldTokens = uint256(saleInfo.tokensForSale).sub(\\n                soldTokens\\n            );\\n            if (unsoldTokens > 0) {\\n                TransferHelper.safeTransfer(\\n                    address(saleInfo.tokenOut),\\n                    owner,\\n                    unsoldTokens\\n                );\\n            }\\n        } else {\\n            TransferHelper.safeTransfer(\\n                address(saleInfo.tokenOut),\\n                owner,\\n                saleInfo.tokensForSale.sub(\\n                    _getTokenAmount(saleStatus.tokensCommitted)\\n                )\\n            );\\n        }\\n\\n        emit SaleClosed();\\n    }\\n\\n    /// @dev withdraws purchased tokens if sale successfull, if not releases committed tokens\\n    function withdrawTokens(address user) public {\\n        require(commitment[user] > 0, \\\"FixedPriceSale: nothing to withdraw\\\");\\n        if (isMinRaiseReached()) {\\n            require(saleStatus.isClosed, \\\"FixedPriceSale: not closed yet\\\");\\n            uint256 withdrawAmount = _getTokenAmount(commitment[user]);\\n            commitment[user] = 0;\\n            TransferHelper.safeTransfer(\\n                address(saleInfo.tokenOut),\\n                user,\\n                withdrawAmount\\n            );\\n            emit NewTokenWithdraw(user, withdrawAmount);\\n        } else {\\n            require(\\n                block.timestamp > saleInfo.endDate,\\n                \\\"FixedPriceSale: endDate not reached\\\"\\n            );\\n            uint256 releaseAmount = commitment[user];\\n            commitment[user] = 0;\\n            TransferHelper.safeTransfer(\\n                address(saleInfo.tokenIn),\\n                user,\\n                releaseAmount\\n            );\\n            emit NewTokenRelease(user, releaseAmount);\\n        }\\n    }\\n\\n    function _getTokenAmount(uint256 _amount) internal view returns (uint256) {\\n        return _amount.mul(uint256(saleInfo.tokenPrice)).div(1e18);\\n    }\\n\\n    function isMinRaiseReached() public view returns (bool) {\\n        return saleStatus.tokensCommitted >= saleInfo.minRaise;\\n    }\\n\\n    function isSaleEnded() public view returns (bool) {\\n        return\\n            block.timestamp > saleInfo.endDate ||\\n            _getTokenAmount(saleStatus.tokensCommitted) ==\\n            saleInfo.tokensForSale;\\n    }\\n\\n    /// @dev init function expexted to be called by SaleLauncher to init the sale\\n    /// @param _data encoded init params\\n    function init(bytes calldata _data) public notInitialized {\\n        (\\n            IERC20 _tokenIn,\\n            IERC20 _tokenOut,\\n            uint256 _tokenPrice,\\n            uint256 _tokensForSale,\\n            uint256 _startDate,\\n            uint256 _endDate,\\n            uint256 _minCommitment,\\n            uint256 _maxCommitment,\\n            uint256 _minRaise,\\n            address _owner,\\n            address _participantList\\n        ) = abi.decode(\\n                _data,\\n                (\\n                    IERC20,\\n                    IERC20,\\n                    uint256,\\n                    uint256,\\n                    uint256,\\n                    uint256,\\n                    uint256,\\n                    uint256,\\n                    uint256,\\n                    address,\\n                    address\\n                )\\n            );\\n\\n        initSale(\\n            _tokenIn,\\n            _tokenOut,\\n            _tokenPrice,\\n            _tokensForSale,\\n            _startDate,\\n            _endDate,\\n            _minCommitment,\\n            _maxCommitment,\\n            _minRaise,\\n            _owner,\\n            _participantList\\n        );\\n    }\\n\\n    /// @dev withdraw any ERC20 token by owner\\n    /// @param token ERC20 token address\\n    /// @param amount Amount to withdraw\\n    function ERC20Withdraw(address token, uint256 amount) external onlyOwner {\\n        require(saleStatus.isClosed, \\\"FixedPriceSale: sale not closed\\\");\\n        require(\\n            block.timestamp > saleInfo.endDate,\\n            \\\"FixedPriceSale: deadline not reached\\\"\\n        );\\n        if (saleStatus.saleSucceeded) {\\n            require(\\n                token != address(saleInfo.tokenOut),\\n                \\\"FixedPriceSale: cannot withdraw tokenOut\\\"\\n            );\\n        }\\n        TransferHelper.safeTransfer(token, owner, amount);\\n    }\\n\\n    /// @dev withdraw ETH token by owner\\n    /// @param amount ETH amount to withdraw\\n    function ETHWithdraw(uint256 amount) external onlyOwner {\\n        require(saleStatus.isClosed, \\\"FixedPriceSale: sale not closed\\\");\\n        require(\\n            block.timestamp > saleInfo.endDate,\\n            \\\"FixedPriceSale: deadline not reached\\\"\\n        );\\n        TransferHelper.safeTransferETH(owner, amount);\\n    }\\n\\n    /// @dev to get remaining token at any point of the sale\\n    function remainingTokensForSale() public view returns (uint256) {\\n        return\\n            saleInfo.tokensForSale.sub(\\n                _getTokenAmount(saleStatus.tokensCommitted)\\n            );\\n    }\\n\\n    /// @dev to get the remaining time of the sale in seconds\\n    function secondsRemainingInSale() public view returns (uint256) {\\n        if (saleInfo.endDate < block.timestamp) {\\n            return 0;\\n        }\\n        return saleInfo.endDate.sub(block.timestamp);\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xc6a1b8410e595142cc6da4a4d27cc23d1b298fa49df21e7b83b7d31a8b7d0c40\",\"license\":\"LGPL-3.0\"},\"contracts/shared/interfaces/IParticipantList.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity >=0.6.8;\\n\\ninterface IParticipantList {\\n    function isInList(address account) external view returns (bool);\\n\\n    function setParticipantAmounts(\\n        address[] memory accounts,\\n        uint256[] memory amounts\\n    ) external;\\n\\n    function initialized() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x39973dd7b329432d31008399607f45d39da211d67bd7c5ec86525cc95e6a7ed4\",\"license\":\"LGPL-3.0\"},\"contracts/shared/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity >=0.6.8;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x095ea7b3, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper: APPROVE_FAILED\\\"\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0xa9059cbb, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper: TRANSFER_FAILED\\\"\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper: TRANSFER_FROM_FAILED\\\"\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"TransferHelper: ETH_TRANSFER_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x0cfb98c5d64d2a593f5d2a1172d13b3a0a492422b1871a1bd0eed45acc04297d\",\"license\":\"LGPL-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "ERC20Withdraw(address,uint256)": {
        "details": "withdraw any ERC20 token by owner",
        "params": {
          "amount": "Amount to withdraw",
          "token": "ERC20 token address"
        }
      },
      "ETHWithdraw(uint256)": {
        "details": "withdraw ETH token by owner",
        "params": {
          "amount": "ETH amount to withdraw"
        }
      },
      "closeSale()": {
        "details": "close sale if either minRaise is reached or endDate passed"
      },
      "commitTokens(uint256)": {
        "details": "reserve tokens for a fixed price",
        "params": {
          "amount": "of tokenIn to buy at a fixed price"
        }
      },
      "init(bytes)": {
        "details": "init function expexted to be called by SaleLauncher to init the sale",
        "params": {
          "_data": "encoded init params"
        }
      },
      "remainingTokensForSale()": {
        "details": "to get remaining token at any point of the sale"
      },
      "secondsRemainingInSale()": {
        "details": "to get the remaining time of the sale in seconds"
      },
      "withdrawTokens(address)": {
        "details": "withdraws purchased tokens if sale successfull, if not releases committed tokens"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3754,
        "contract": "contracts/sales/FixedPriceSale.sol:FixedPriceSale",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3788,
        "contract": "contracts/sales/FixedPriceSale.sol:FixedPriceSale",
        "label": "saleInfo",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(SaleInfo)3777_storage"
      },
      {
        "astId": 3790,
        "contract": "contracts/sales/FixedPriceSale.sol:FixedPriceSale",
        "label": "saleStatus",
        "offset": 0,
        "slot": "11",
        "type": "t_struct(SaleStatus)3786_storage"
      },
      {
        "astId": 3794,
        "contract": "contracts/sales/FixedPriceSale.sol:FixedPriceSale",
        "label": "commitment",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)1305": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(SaleInfo)3777_storage": {
        "encoding": "inplace",
        "label": "struct FixedPriceSale.SaleInfo",
        "members": [
          {
            "astId": 3756,
            "contract": "contracts/sales/FixedPriceSale.sol:FixedPriceSale",
            "label": "tokenIn",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)1305"
          },
          {
            "astId": 3758,
            "contract": "contracts/sales/FixedPriceSale.sol:FixedPriceSale",
            "label": "tokenOut",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IERC20)1305"
          },
          {
            "astId": 3760,
            "contract": "contracts/sales/FixedPriceSale.sol:FixedPriceSale",
            "label": "tokenPrice",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3762,
            "contract": "contracts/sales/FixedPriceSale.sol:FixedPriceSale",
            "label": "tokensForSale",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3764,
            "contract": "contracts/sales/FixedPriceSale.sol:FixedPriceSale",
            "label": "startDate",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 3766,
            "contract": "contracts/sales/FixedPriceSale.sol:FixedPriceSale",
            "label": "endDate",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 3768,
            "contract": "contracts/sales/FixedPriceSale.sol:FixedPriceSale",
            "label": "minCommitment",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 3770,
            "contract": "contracts/sales/FixedPriceSale.sol:FixedPriceSale",
            "label": "maxCommitment",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 3772,
            "contract": "contracts/sales/FixedPriceSale.sol:FixedPriceSale",
            "label": "minRaise",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 3774,
            "contract": "contracts/sales/FixedPriceSale.sol:FixedPriceSale",
            "label": "hasParticipantList",
            "offset": 0,
            "slot": "9",
            "type": "t_bool"
          },
          {
            "astId": 3776,
            "contract": "contracts/sales/FixedPriceSale.sol:FixedPriceSale",
            "label": "participantList",
            "offset": 1,
            "slot": "9",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(SaleStatus)3786_storage": {
        "encoding": "inplace",
        "label": "struct FixedPriceSale.SaleStatus",
        "members": [
          {
            "astId": 3779,
            "contract": "contracts/sales/FixedPriceSale.sol:FixedPriceSale",
            "label": "tokensCommitted",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3781,
            "contract": "contracts/sales/FixedPriceSale.sol:FixedPriceSale",
            "label": "isClosed",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 3783,
            "contract": "contracts/sales/FixedPriceSale.sol:FixedPriceSale",
            "label": "saleSucceeded",
            "offset": 1,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 3785,
            "contract": "contracts/sales/FixedPriceSale.sol:FixedPriceSale",
            "label": "initialized",
            "offset": 2,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}